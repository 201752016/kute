
      /* TurboJS v1.0 */;
      TurboJS.cache = {"/index.html":{"html":"\u003chtml\u003e\n\u003chead\u003e\n\t\u003clink rel=\"stylesheet\" href=\"https://cdn.getforge.com/socketchessplay.getforge.io/1500257171/css/chessboard-0.3.0.css\"\u003e\n\t\u003cscript src=\"https://cdn.getforge.com/socketchessplay.getforge.io/1500257171/js/chessboard-0.3.0.js\"\u003e\u003c/script\u003e\n\u003cscript src=\"https://cdn.getforge.com/socketchessplay.getforge.io/1500257171/js/chess.js\"\u003e\u003c/script\u003e\n\u003cscript src=\"https://cdnjs.cloudflare.com/ajax/libs/peerjs/0.3.14/peer.js\"\u003e\u003c/script\u003e\n\u003clink href=\"https://fonts.googleapis.com/css?family=Fresca\" rel=\"stylesheet\"\u003e \n\u003clink href=\"https://fonts.googleapis.com/css?family=Arapey\" rel=\"stylesheet\"\u003e \n\n\u003cscript src=\"https://ajax.googleapis.com/ajax/libs/jquery/3.2.1/jquery.min.js\"\u003e\u003c/script\u003e\n\u003cstyle type=\"text/css\"\u003e\n\n.white\n{\nfloat: left;\n  margin-left: 15px;\n  font-size: 40px;\n  font-weight: bold;\n  font-family: 'Arapey', serif;\n\n}\n.black{\nfloat: right;\n  margin-right: 25px;\n  font-size: 40px;\n   font-weight: bold;\n   font-family: 'Arapey', serif;\n}\n  .head\n  {\n    text-align: center;\n    font-family: 'Fresca', sans-serif;\n    font-size: 50px;\n\n  }\n .w\n {\n  float: left;\n  margin-left: 2px;\n}\n\n .bl\n {\n  float: right;\n  margin-left: 2px;\n }\n\u003c/style\u003e\n\u003c/head\u003e\n\u003cbody bgcolor=\"dff3f2\"\u003e\n\u003ch1 class=\"head\" \u003e\u003cimg src=\"https://cdn.getforge.com/socketchessplay.getforge.io/1500257171/img/chesspieces/wikipedia/wQ.png\"\u003eCHESS\u003cimg src=\"https://cdn.getforge.com/socketchessplay.getforge.io/1500257171/img/chesspieces/wikipedia/bQ.png\"\u003e\n\u003c/h1\u003e\n\u003ch2\u003e\n  \u003cdiv align=\"center\"\u003e\n   \u003cfont color=\"brown\"\u003e\u003cb\u003e\u003ci\u003eId for your session: \u003c/font\u003e \u003cinput type=\"text\" name=\"fname\" id=\"sessionId\"\u003e\u003cbr\u003e\n   \u003cbutton onclick=\"registerSession()\"\u003eJoin In !\u003c/button\u003e\n \u003c/div\u003e\n\u003c/h2\u003e\n\u003ch3\u003e\n\u003cdiv align=\"center\"\u003e\n  \u003cfont color=\"brown\" id=\"RTCStatus\"\u003e\u003cb\u003e\u003ci\u003e \u003c/font\u003e\n\u003c/div\u003e\u003c/h3\u003e\n\u003ch3\u003e\n\u003cdiv align=\"center\"\u003e\n  \u003cfont color=\"brown\" id=\"PeerId\"\u003e\u003cb\u003e\u003ci\u003e \u003c/font\u003e\n\u003c/div\u003e\u003c/h3\u003e\n\n\u003cdiv class=\"white\"\u003e\nWhite Player\n\u003c/div\u003e\n\u003cdiv class=\"black\"\u003e\nBlack Player\u003cbr\u003e\n\u003c/div\u003e\n\u003cdiv id=\"board\" style=\"width: 500px; margin:0 auto;\"\u003e\u003c/div\u003e\n\u003cp align=\"center\"\u003e\u003cfont color=\"brown\"\u003e\u003cb\u003e\u003ci\u003eSTATUS: \u003c/font\u003e\u003cspan id=\"status\"\u003e\u003c/span\u003e\u003c/p\u003e\u003c/i\u003e\u003c/b\u003e\u003c/p\u003e\u003c/p\u003e\n\u003c!-- \u003cp\u003eFEN: \u003cspan id=\"fen\"\u003e\u003c/span\u003e\u003c/p\u003e --\u003e\n\u003c!-- \u003cp align=\"center\"\u003ePGN: \u003cspan id=\"pgn\"\u003e\u003c/span\u003e\u003c/p\u003e\n --\u003e\u003c/body\u003e\n\u003cscript type=\"text/javascript\"\u003e\nvar board,\n  game = new Chess(),\n  statusEl = $('#status'),\n  fenEl = $('#fen'),\n  pgnEl = $('#pgn');\n  turn=true;\n  is_multiplayer=false;\n  //The turn variables signify the turn of the user in a multiplayer game \n\n\n// do not pick up pieces if the game is over\n// only pick up pieces for the side to move\nvar onDragStart = function(source, piece, position, orientation) {\n  if (game.game_over() === true ||\n      (game.turn() === 'w' \u0026\u0026 piece.search(/^b/) !== -1) ||\n      (game.turn() === 'b' \u0026\u0026 piece.search(/^w/) !== -1)|| turn===false) {\n    return false;\n  }\n};\n\nvar onDrop = function(source, target) {\n  // see if the move is legal\n  var move = game.move({\n    from: source,\n    to: target,\n    promotion: 'q' // NOTE: always promote to a queen for example simplicity\n  });\n\n  // illegal move\n  if (move === null) return 'snapback';\n  if(turn===false) return 'snapback';\n\n  //Only if we have a multiplayer connection we will send data to peer\n  if(is_multiplayer){\n  peer_connection.send({\n    start:source,\n    target:target\n  })\n  turn=false;\n}\n  updateStatus();\n};\n\n// update the board position after the piece snap \n// for castling, en passant, pawn promotion\nvar onSnapEnd = function() {\n  board.position(game.fen());\n\n};\n\nvar updateStatus = function() {\n  var status = '';\n\n  var moveColor = 'White';\n  if (game.turn() === 'b') {\n    moveColor = 'Black';\n  }\n\n  // checkmate?\n  if (game.in_checkmate() === true) {\n    status = 'Game over, ' + moveColor + ' is in checkmate.';\n  }\n\n  // draw?\n  else if (game.in_draw() === true) {\n    status = 'Game over, drawn position';\n  }\n\n  // game still on\n  else {\n    status = moveColor + ' to Move';\n\n    // check?\n    if (game.in_check() === true) {\n      status += ', ' + moveColor + ' is in check';\n    }\n  }\n\n  statusEl.html(status);\n /* fenEl.html(game.fen());*/\n  pgnEl.html(game.pgn());\n};\n\nvar cfg = {\n  draggable: true,\n  position: 'start',\n  onDragStart: onDragStart,\n  onDrop: onDrop,\n  onSnapEnd: onSnapEnd\n};\nboard = ChessBoard('board', cfg);\n\nupdateStatus();\n\u003c/script\u003e\n\u003cscript type=\"text/javascript\"\u003e\n\n//This is the script that is making the RTC sockets work\n\n//Create a new peer object with a custom server key obtained from peer.js\nvar peer = new Peer({key: 'ze63oa5saa21q0k9'});\n\n\n//get other objects from the DOM \nvar status_bar=document.getElementById(\"RTCStatus\");\nvar peer_id_display=document.getElementById(\"PeerId\");\nvar peer_connection;\n\n\n//Callback for connection with RTC Server\npeer.on('open', function(id) {\n  console.log('My peer ID is: ' + id);\n  peer_id_display.innerHTML=\"Id : \"+id;\n});\n\n\n//Receive connection from clients\npeer.on('connection', function(conn) {\n  //Initialise a multi player game\n  status_bar.innerHTML=\"Received a Connection\";\n  is_multiplayer=true;\n  board = ChessBoard('board', cfg);\n\n  //Receive message callback\n  conn.on('data', function(data) {\n    console.log('Received', data);\n    //Move the pieces accordingly\n    peerMoved(data.start,data.target);\n    turn=true;\n  });\n  peer_connection=conn;\n});\n\n\n//Function to handle the registration of a session\nfunction registerSession(){\n  connectPeer(document.getElementById(\"sessionId\").value);\n  turn=false;\n  return;\n}\n\n\n//Function to send connection to other peer\nfunction connectPeer(peer_id){\n  peer_connection=peer.connect(peer_id);\n  peer_connection.on('open', function() {\n  //Initialise a multi-player game\n  board = ChessBoard('board', cfg);\n  status_bar.innerHTML=\"Connected..Let's Go\";\n  is_multiplayer=true;\n\n  //Receive Message Callback\n  peer_connection.on('data', function(data) {\n    console.log('Received', data);\n    peerMoved(data.start,data.target);\n    turn=true;        \n  });\n});\n}\n\n\n//function to move the pieces according to the player\nfunction peerMoved(startIt,targetTo){\n    console.log(\"We are moving from\"+startIt+\" to \"+targetTo)\n    game.move({from: startIt, to: targetTo});\n    board.position(game.fen()); // fen is the board layout\n    updateStatus();\n}\n\u003c/script\u003e\n\u003c/html\u003e\n\n\n\n  \u003c!--\n\u003cdiv class=\"w\"\u003e\n\u003cimg src=\"https://cdn.getforge.com/socketchessplay.getforge.io/1500257171/img/chesspieces/wikipedia/wQ.png\"\u003e\n\u003c/div\u003e\n\u003cdiv class=\"bl\"\u003e\n\u003cimg src=\"https://cdn.getforge.com/socketchessplay.getforge.io/1500257171/img/chesspieces/wikipedia/bQ.png\"\u003e\n\u003c/div\u003e--\u003e"}};
      TurboJS.run();
    